package models
// generated automatically
// if you change the file stash you changes before regenerate model

import (
{{ range $key, $import := .Imports }}{{ $import }}
{{ end }}
)
{{ $index := 0 }}{{ $comma := 0 }}{{ $isSoft := false }}
// {{ .Model }} model
type {{ .Model }} struct { {{ range $key, $column := .Columns }}
    {{ if $column.Description }}// {{ $column.Description }}{{ end }}
    {{ $column.ModelName }} {{ if or $column.IsArray $column.IsByteArray }} {{ $column.ModelType }} {{ else }} {{ pointerType $column.ModelType }} {{ end }} {{ $column.Tags }} {{ end }}
}

// New {{ .Model }} method
func New{{ .Model }}() *{{ .Model }} {
    return &{{ .Model }}{}
}

// Model table name
func (m *{{ .Model }}) Table() string {
    return "{{ .Table }}"
}

// Model columns
func (m *{{ .Model }}) Columns() []string {
    return []string{ {{ range $key, $column := .Columns }}{{ if $key }}, {{ end }}"{{ $column.Name }}"{{ end }} }
}

// Model values
func (m *{{ .Model }}) Values() []interface{} {
    return []interface{}{ {{ range $key, $column := .Columns }}{{ if $key }}, {{ end }}{{ if $column.IsArray }}pq.Array({{ end }}&m.{{ $column.ModelName }}{{ if $column.IsArray  }}){{ end }}{{ end }} }
}

// New {{ .Model }} Collection
func New{{ .Model }}Collection() *{{ .Model }}Collection {
    m := &{{ .Model }}{}
    qb := gosql.NewSelect().Columns(m.Columns()...).From(m.Table())
    collection := &{{ .Model }}Collection{
        collection: make({{ .Model }}Items, 0),
        QB:  qb,
        Iterator: godb.NewIterator(0),
        CountOver: -1,
    }
    return collection
}
