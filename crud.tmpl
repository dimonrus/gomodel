package {{ .Package }}

import (
{{ range $key, $import := .Imports }}{{ $import }}
{{ end }}
)

// {{ .Model }} Define wrapper for {{ .Model }} model
type {{ .Model }} struct {
    *client.{{ .Model }}
}

{{ $index := 0 }} {{ $model := .Model}}
// SetPrimary {{ .Model }} set primary keys
func (m *{{ .Model }}) SetPrimary({{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $index }}, {{ end }}{{ $index = inc $index }} {{ icameled $column.Name }} {{ $column.ModelType }} {{ end }}{{ end }}) *{{ .Model }} { {{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}
    m.{{ $model }}.{{ $column.ModelName }} = &{{ icameled $column.Name }}{{ end }}{{ end }}
    return m
}

// Load {{ .Model }}
func (m *{{ .Model }}) Load(q godb.Queryer) porterr.IError {
    return gomodel.Load(q, m.{{ .Model }})
}

// Save {{ .Model }}
func (m *{{ .Model }}) Save(q godb.Queryer) porterr.IError {
    if m.{{ .Model }} != nil {
        e := v.ValidateStruct(m.{{ .Model }})
        if e != nil {
            return e
        }
    }
    return gomodel.Save(q, m.{{ .Model }})
}

// Delete {{ .Model }}
func (m *{{ .Model }}) Delete(q godb.Queryer) porterr.IError {
    return gomodel.Delete(q, m.{{ .Model }})
}

// New{{ .Model }} Init {{ .Model }}
func New{{ .Model }}() *{{ .Model }} {
    return &{{ .Model }}{ {{ .Model }}: client.New{{ .Model }}()}
}

// {{ .Model }}Search search items according to form
func {{ .Model }}Search(q godb.Queryer, form client.{{ .Model }}SearchForm) (items []*client.{{ .Model }}, meta gorest.Meta, e porterr.IError) {
    collection := client.New{{ .Model }}Collection()
    condition := form.PrepareCondition()
    if condition.IsEmpty() {
        items = collection.Items()
        return
    }
    collection.Where().Replace(condition)
    e = collection.Load(q)
    items = collection.Items()
    meta.Total = collection.Count()
    return
}