package {{ .Package }}

import (
{{ range $key, $import := .Imports }}{{ $import }}
{{ end }}
)
{{ $index := 0 }} {{ $model := .Model }}
// RequestUpdate{{ .Model }} Request form for update {{ .Model }}
//
// swagger:parameters Update{{ .Model }}
type RequestUpdate{{ .Model }} struct {
    {{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $column.Description }}// {{ $column.Description }}{{ end }}
    // Required: true
    // in: path
    {{ $column.ModelName }} {{ $column.ModelType }} {{ jsonSingleTag $column.ModelName }} {{ end }}{{ end }}
    // In: body
    Body struct {
        client.{{ .Model }}
    }
}

// ResponseUpdate{{ .Model }} Response {{ icameled .Model }} entity
//
// swagger:response ResponseUpdate{{ .Model }}
type ResponseUpdate{{ .Model }} struct {
    // In: body
    Body struct {
        // System message
        Message string `json:"message,omitempty"`
        // {{ .Model }} entity
        Data client.{{ .Model }} `json:"data"`
    }
}

{{ $index = 0 }}
// swagger:route PATCH /{{ .Package }}/{{ icameled .Model }}/{ {{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ icameled $column.ModelName }}{{ end }}{{ end }} } Update Update{{ .Model }}
//
// {{ .Model }}. Update entity by primary key
//
// Update and return entity
//
//     Consumes:
//     - application/json
//
//     Produces:
//     - application/json
//
//     Schemes: https
//
//     Responses:
//       200: ResponseUpdate{{ .Model }}
//       400: ResponseError
//       500: ResponseError
func Update{{ .Model }}(w http.ResponseWriter, r *http.Request) { {{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}
    {{ parseIdentifier $column.Name $column.ModelType}}{{ end }}{{ end }}
    {{ icameled .Model }} := core.New{{ $model }}().SetPrimary({{ range $key, $column := .Columns }}{{ if $column.IsPrimaryKey }}{{ if $index }}, {{ end }}{{ $index = inc $index }} {{ castToIdentifier $column.Name $column.ModelType }} {{ end }}{{ end }})
    e := {{ icameled .Model }}.Load(base.App.GetDB())
    if e != nil {
        gorest.Send(w, gorest.NewErrorJsonResponse(e))
        return
    }
    e = gorest.ParseJsonBody(r.Body, {{ icameled .Model }}.{{ .Model}})
    if e != nil {
        gorest.Send(w, gorest.NewErrorJsonResponse(e))
        return
    }
    e = {{ icameled .Model }}.Save(base.App.GetDB())
    if e != nil {
        gorest.Send(w, gorest.NewErrorJsonResponse(e))
        return
    }
    gorest.Send(w, gorest.NewOkJsonResponse("Update {{ .Model }}", {{ icameled .Model }}, nil))
}